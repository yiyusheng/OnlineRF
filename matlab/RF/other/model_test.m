function [result, preclass] = model_test(Model, TestTable)

model = Model;
testTable = TestTable;

predictorNames = {'smart_5_raw',...
    'smart_187_raw',...
    'smart_197_raw',... 
    'smart_1_normalized',... 
    'smart_4_raw',... 
    'smart_7_normalized',...  
    'smart_9_normalized',...  
    'smart_12_raw',...  
    'smart_183_raw',...  
    'smart_184_raw',...  
    'smart_189_raw',...  
    'smart_193_normalized',...  
    'smart_198_raw',...  
    'smart_199_raw',...  
    'smart_3_normalized',...  
    'smart_5_normalized',...  
    'smart_7_raw',...  
    'smart_9_raw',...  
    'smart_183_normalized',...  
    'smart_184_normalized',...  
    'smart_187_normalized',...  
    'smart_188_normalized',...  
    'smart_188_raw',...  
    'smart_189_normalized',...  
    'smart_192_raw',...  
    'smart_193_raw',...  
    'smart_194_raw',...  
    'smart_197_normalized',...  
    'smart_198_normalized'};

testTable.preclass = testTable.class;
parfor i = 1:size(testTable, 1)
    disk = testTable(i, :);
    smarts = disk.smarts{1};
    smart = scale_data(smarts, 1);
    
    if isstruct(model)
        preclass = model.predictFcn(smart);
    else
        preclass = predict(model, smart{:, predictorNames});
%         preclass = svmpredict(smart.preclass, smart{:, predictorNames}, model);
    end
    smarts.preclass = preclass;
    
    disk.smarts{1} = smarts;
    disk.preclass = sum(preclass);
    testTable(i, :) = disk;
end

tp = sum(testTable.class >= 1 & testTable.preclass >= 1);
totalp = sum(testTable.class == 1);
fdr = tp / totalp;
fp = sum(testTable.class == 0 & testTable.preclass >= 1);
totaln = sum(testTable.class == 0);
far = fp / totaln;
fn = sum(testTable.class >= 1 & testTable.preclass == 0);
test_error = (fn+fp)/size(testTable,1);

result = sprintf('testError->%.4f FDR->%d/%d->%.4f, FAR->%d/%d->%.4f',test_error, tp, totalp, fdr, fp, totaln, far);
preclass = testTable.preclass;

end