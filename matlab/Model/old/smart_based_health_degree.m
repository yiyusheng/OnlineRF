%% Load data
clc;clear;
export = 1;
f_sort = 0;
dir_mydata = '~/Data/OnlineRF/oriorder/';
dir_data = '/home/xzhuang/Data/xzData20180711/mat/';
% load(strcat(dir_data,'smart1_all.mat'));
% load(strcat(dir_data,'smart1_train_all.mat'));
load(strcat(dir_data,'smart1_dtest.mat'));
predictorNames = {...
    'smart_5_raw',...
    'smart_187_raw',...
    'smart_197_raw',...
    'smart_1_normalized',...
    'smart_4_raw',...
    'smart_7_normalized',...
    'smart_9_normalized',...
    'smart_12_raw',...
    'smart_183_raw',...
    'smart_184_raw',...
    'smart_189_raw',...
    'smart_193_normalized',...
    'smart_198_raw',...
    'smart_199_raw',...
    'smart_3_normalized',...
    'smart_5_normalized',...
    'smart_7_raw',...
    'smart_9_raw',...
    'smart_183_normalized',...
    'smart_184_normalized',...
    'smart_187_normalized',...
    'smart_188_normalized',...
    'smart_188_raw',...
    'smart_189_normalized',...
    'smart_192_raw',...
    'smart_193_raw',...
    'smart_194_raw',...
    'smart_197_normalized',...
    'smart_198_normalized'};

metaNames = {'id','sn_id','date','datenum','class'};
smart = smart1_dtest;
size_smart = size(smart);
smart.id = (1:size_smart(1))';
smart_meta = smart(:,metaNames);

%% select failed drives with 30 days smart data
full_snid = smart_meta.sn_id(smart_meta.class==1 & smart_meta.datenum == 30);
smart_meta_30days_before_failure = smart_meta(ismember(smart_meta.sn_id,full_snid) & smart_meta.datenum <= 30,:);
smart_meta_30days_before_failure = smart_meta(smart_meta.class==1 & smart_meta.datenum <=30,:);
count_snid = tabulate(smart_meta_30days_before_failure.sn_id);
count_snid = count_snid(count_snid(:,2)==30,1);
smart_meta_30days_before_failure = smart_meta_30days_before_failure(ismember(smart_meta_30days_before_failure.sn_id,count_snid),:);
smart_30days_before_failure = smart(ismember(smart.id,smart_meta_30days_before_failure.id),[metaNames,predictorNames]);

%% generate count of change and amplify of change for each attribute and each drive
smart_bf = smart_30days_before_failure;
[G,groups] = findgroups(smart_bf.sn_id);
fun_chg_count = @(x)sum(diff(x)>0);
fun_chg_amplify = @(x)(max(x)-min(x));

chg_count = zeros(length(groups),length(predictorNames));
chg_amplify = zeros(length(groups),length(predictorNames));

for i=1:length(predictorNames)
    chg_count(:,i) = splitapply(fun_chg_count,smart_bf(:,predictorNames(i)),G);
    chg_amplify(:,i) = splitapply(fun_chg_amplify,smart_bf(:,predictorNames(i)),G);
end


